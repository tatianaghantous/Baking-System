// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UAS.Persistence.Context;

#nullable disable

namespace UAS.Persistence.Migrations
{
    [DbContext(typeof(AccountsDbContext))]
    partial class AccountsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UAS.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("balance");

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("accounts_pkey");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("branches_pkey");

                    b.HasIndex("LocationId");

                    b.ToTable("branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 1,
                            Name = "Branch 1"
                        },
                        new
                        {
                            Id = 2,
                            LocationId = 2,
                            Name = "Branch 2"
                        });
                });

            modelBuilder.Entity("UAS.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location_name");

                    b.HasKey("Id")
                        .HasName("locations_pkey");

                    b.HasIndex(new[] { "LocationName" }, "locations_location_name_key")
                        .IsUnique();

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationName = "Location 1"
                        },
                        new
                        {
                            Id = 2,
                            LocationName = "Location 2"
                        });
                });

            modelBuilder.Entity("UAS.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "RoleName" }, "roles_role_name_key")
                        .IsUnique();

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("UAS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("RoleId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("UAS.Domain.Entities.Account", b =>
                {
                    b.HasOne("UAS.Domain.Entities.Branch", "Branch")
                        .WithMany("Account")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("accounts_branch_id_fkey");

                    b.HasOne("UAS.Domain.Entities.User", "User")
                        .WithMany("Account")
                        .HasForeignKey("UserId")
                        .HasConstraintName("accounts_user_id_fkey");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UAS.Domain.Entities.Branch", b =>
                {
                    b.HasOne("UAS.Domain.Entities.Location", "Location")
                        .WithMany("Branch")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("branches_location_id_fkey");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("UAS.Domain.Entities.User", b =>
                {
                    b.HasOne("UAS.Domain.Entities.Branch", "Branch")
                        .WithMany("User")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("users_branch_id_fkey");

                    b.HasOne("UAS.Domain.Entities.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UAS.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UAS.Domain.Entities.Location", b =>
                {
                    b.Navigation("Branch");
                });

            modelBuilder.Entity("UAS.Domain.Entities.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("UAS.Domain.Entities.User", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
